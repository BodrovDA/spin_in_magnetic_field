// -*- C++ -*-
// $Id: Rotation.icc 6497 2000-05-08 13:04:32Z katayama $
// ---------------------------------------------------------------------------
//
// This file is a part of the CLHEP - a Class Library for High Energy Physics.
// 
// This is the definitions of the inline member functions of the
// HepRotation class
//

inline HepRotation::HepRotation()
: rxx(1.0), rxy(0.0), rxz(0.0), ryx(0.0), ryy(1.0), ryz(0.0),
  rzx(0.0), rzy(0.0), rzz(1.0) {}

inline HepRotation::HepRotation(const HepRotation & m)
: rxx(m.rxx), rxy(m.rxy), rxz(m.rxz), ryx(m.ryx), ryy(m.ryy), ryz(m.ryz),
  rzx(m.rzx), rzy(m.rzy), rzz(m.rzz) {}

inline HepRotation::HepRotation(double mxx, double mxy, double mxz,
			 double myx, double myy, double myz,
			 double mzx, double mzy, double mzz)
: rxx(mxx), rxy(mxy), rxz(mxz), ryx(myx), ryy(myy), ryz(myz),
  rzx(mzx), rzy(mzy), rzz(mzz) {}

inline double HepRotation::xx() const { return rxx; }
inline double HepRotation::xy() const { return rxy; }
inline double HepRotation::xz() const { return rxz; }
inline double HepRotation::yx() const { return ryx; }
inline double HepRotation::yy() const { return ryy; }
inline double HepRotation::yz() const { return ryz; }
inline double HepRotation::zx() const { return rzx; }
inline double HepRotation::zy() const { return rzy; }
inline double HepRotation::zz() const { return rzz; }

inline HepRotation & HepRotation::operator = (const HepRotation & m) {
  rxx = m.rxx;
  rxy = m.rxy;
  rxz = m.rxz;
  ryx = m.ryx;
  ryy = m.ryy;
  ryz = m.ryz;
  rzx = m.rzx;
  rzy = m.rzy;
  rzz = m.rzz;
  return *this;
}

inline bool HepRotation::operator == (const HepRotation& m) const {
  return (rxx == m.rxx && rxy == m.rxy && rxz == m.rxz &&
          ryx == m.ryx && ryy == m.ryy && ryz == m.ryz &&
          rzx == m.rzx && rzy == m.rzy && rzz == m.rzz) ? true : false;
} 

inline bool HepRotation::operator != (const HepRotation &m) const {
  return (rxx != m.rxx || rxy != m.rxy || rxz != m.rxz ||
          ryx != m.ryx || ryy != m.ryy || ryz != m.ryz ||
          rzx != m.rzx || rzy != m.rzy || rzz != m.rzz) ? true : false;
}

inline bool HepRotation::isIdentity() const {
  return  (rxx == 1.0 && rxy == 0.0 && rxz == 0.0 &&
           ryx == 0.0 && ryy == 1.0 && ryz == 0.0 &&
           rzx == 0.0 && rzy == 0.0 && rzz == 1.0) ? true : false;
}

inline Hep3Vector HepRotation::operator * (const Hep3Vector & p) const {
  return Hep3Vector(rxx*p.x() + rxy*p.y() + rxz*p.z(),
		    ryx*p.x() + ryy*p.y() + ryz*p.z(),
		    rzx*p.x() + rzy*p.y() + rzz*p.z());
}

inline HepRotation & HepRotation::operator *= (const HepRotation & m) {
  return *this = operator * (m);
}

inline HepRotation & HepRotation::transform(const HepRotation & m) {
  return *this = m.operator * (*this);
}

inline HepRotation HepRotation::inverse() const {
  return HepRotation(rxx, ryx, rzx, rxy, ryy, rzy, rxz, ryz, rzz);
}

inline HepRotation & HepRotation::invert() {
  return *this=inverse();
}

inline HepRotation & HepRotation::rotate(double psi, const Hep3Vector * p) {
  return rotate(psi, *p);
}

